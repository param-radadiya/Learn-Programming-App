<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Mangal;
	panose-1:2 4 5 3 5 2 3 3 2 2;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Book Antiqua";
	panose-1:2 4 6 2 5 3 5 3 3 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:7.1pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-GB>

<div class=WordSection1>

<p class=MsoNormal style='line-height:150%'>&nbsp;</p>

<h1 align=center style='text-align:center;line-height:150%'>28. VARIABLE
ARGUMENTS</h1>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>Sometimes, you may come across a
situation, when you want to have a function, which can take variable number of
arguments, i.e., parameters, instead of predefined number of parameters. The C
programming language provides a solution for this situation and you are allowed
to define a function which can accept variable number of parameters based on
your requirement. The following example shows the definition of such a
function. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#1F3864'>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>int func(int, ... ) </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>{ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>} </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>int main() </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>{ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>func(1, 2, 3); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>func(1, 2, 3, 4); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>} </span></p>

</div>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>It should be noted that the function <b>func()
</b>has its last argument as ellipses, i.e., three dotes (<b>...</b>) and the
one just before the ellipses is always an <b>int </b>which will represent the
total number variable arguments passed. To use such functionality, you need to
make use of <b>stdarg.h </b>header file which provides the functions and macros
to implement the functionality of variable arguments and follow the given
steps: </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm;padding-bottom:1.0pt;border-bottom:.5pt solid windowtext'><span
style='font-family:"Book Antiqua",serif'>1. Define a function with its last
parameter as ellipses and the one just before the ellipses is always an <b>int </b>which
will represent the number of arguments. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm;padding-top:1.0pt;padding-bottom:1.0pt;border-bottom:.5pt solid windowtext'><span
style='font-family:"Book Antiqua",serif'>2. Create a <b>va_list </b>type
variable in the function definition. This type is defined in stdarg.h header
file. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm;padding-top:1.0pt;padding-bottom:1.0pt;border-bottom:.5pt solid windowtext'><span
style='font-family:"Book Antiqua",serif'>3. Use <b>int </b>parameter and <b>va_start
</b>macro to initialize the <b>va_list </b>variable to an argument list. The
macro va_start is defined in stdarg.h header file. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm;padding-top:1.0pt;padding-bottom:1.0pt;border-bottom:.5pt solid windowtext'><span
style='font-family:"Book Antiqua",serif'>4. Use <b>va_arg </b>macro and <b>va_list
</b>variable to access each item in argument list. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm;padding-top:1.0pt'><span style='font-family:"Book Antiqua",serif'>5.
Use a macro <b>va_end </b>to clean up the memory assigned to <b>va_list </b>variable.
</span></p>

</div>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>Now let us follow the above steps and
write down a simple function which can take the variable number of parameters
and return their average: </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#1F3864'>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>#include &lt;stdio.h&gt; </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>#include &lt;stdarg.h&gt; </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>double average(int num,...) </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>{ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>va_list valist; </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>double sum = 0.0; </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>int i; </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>/* initialize valist for num number of arguments */ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>va_start(valist, num); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>/* access all the arguments assigned to valist */ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>for (i = 0; i &lt; num; i++) </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>{ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>sum += va_arg(valist, int); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>} </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>/* clean memory reserved for valist */ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>va_end(valist); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>return sum/num; </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>} </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>int main() </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>{ </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>printf(&quot;Average of 2, 3, 4, 5 = %f\n&quot;, average(4,
2,3,4,5)); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>printf(&quot;Average of 5, 10, 15 = %f\n&quot;, average(3,
5,10,15)); </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;background:#1F3864;
border:none;padding:0cm'><span style='font-family:"Book Antiqua",serif;
color:white'>}</span></p>

</div>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>When the above code is compiled and
executed, it produces the following result. It should be noted that the
function <b>average() </b>has been called twice and each time the first
argument represents the total number of variable arguments being passed. Only
ellipses will be used to pass variable number of arguments. </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%'><span
style='font-family:"Book Antiqua",serif'>&nbsp;</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm'><span style='font-family:"Book Antiqua",serif;color:#00B0F0'>Average
of 2, 3, 4, 5 = 3.500000 </span></p>

<p class=MsoNormal style='text-align:justify;line-height:150%;border:none;
padding:0cm'><span style='font-family:"Book Antiqua",serif;color:#00B0F0'>Average
of 5, 10, 15 = 10.000000</span></p>

</div>

</div>

</body>

</html>
